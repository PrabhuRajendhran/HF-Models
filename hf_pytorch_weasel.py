# -*- coding: utf-8 -*-
"""HF_Pytorch_Weasel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vf8ccYu0P4B5qavFvDeeErtNlZTM_UO6
"""

!pip install datasets -qqq

from datasets import load_dataset

data_files = {"train": "/content/Youtube01-Psy.csv", "test": "/content/Youtube02-KatyPerry.csv"}

yt_dataset = load_dataset("csv", data_files=data_files)

yt_dataset

import torch

checkpoint = "google/electra-base-discriminator"

from transformers import AutoTokenizer, DataCollatorWithPadding

tokenizer = AutoTokenizer.from_pretrained(checkpoint)


def tokenize_function(example):
    return tokenizer(example["CONTENT"], truncation=True)


tokenized_datasets = yt_dataset.map(tokenize_function, batched=True)
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

tokenized_datasets

samples = tokenized_datasets["train"][:8]
samples = {k: v for k, v in samples.items() if k in ['input_ids', 'token_type_ids', 'attention_mask']}
[len(x) for x in samples["input_ids"]]

batch = data_collator(samples)
{k: v.shape for k, v in batch.items()}

tokenized_datasets = tokenized_datasets.remove_columns(['COMMENT_ID', 'AUTHOR', 'DATE', 'CONTENT'])
tokenized_datasets = tokenized_datasets.rename_column("CLASS", "labels")
tokenized_datasets.set_format("torch")
tokenized_datasets["train"].column_names

from torch.utils.data import DataLoader

train_dataloader = DataLoader(
    tokenized_datasets["train"], shuffle=True, batch_size=8, collate_fn=data_collator
)
eval_dataloader = DataLoader(
    tokenized_datasets["test"], batch_size=8, collate_fn=data_collator
)

!pip install tqdm -qqq

from transformers import AdamW, AutoModelForSequenceClassification, get_scheduler
from tqdm import tqdm

model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)
optimizer = AdamW(model.parameters(), lr=3e-5)

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
model.to(device)

num_epochs = 3
num_training_steps = num_epochs * len(train_dataloader)
lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)

progress_bar = tqdm(range(num_training_steps))

model.train()
for epoch in range(num_epochs):
    for batch in train_dataloader:
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs.loss
        loss.backward()

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

!pip install evaluate -qqq

# from datasets import list_metrics
# metrics_list = list_metrics()
# len(metrics_list)
# print(metrics_list)

import evaluate

acc_metric = evaluate.load("accuracy")
f1_metric = evaluate.load("f1")

model.eval()
for batch in eval_dataloader:
    batch = {k: v.to(device) for k, v in batch.items()}
    with torch.no_grad():
        outputs = model(**batch)

    logits = outputs.logits
    predictions = torch.argmax(logits, dim=-1)
    acc_metric.add_batch(predictions=predictions, references=batch["labels"])
    f1_metric.add_batch(predictions=predictions, references=batch["labels"])

acc_metric.compute()

f1_metric.compute()

!pip install /content/weasel-main.zip

!pip install torchmetrics==0.11.4 -qqq

from weasel.models.downstream_models.transformers import Transformers

# instantiate our transformers end model
end_model = model

from weasel.models import Weasel

# instantiate our weasel end-to-end model
weasel = Weasel(
    end_model=end_model,
    num_LFs=len(weak_labels.rules),
    n_classes=2,
    encoder={"hidden_dims": [32, 10]},
    optim_encoder={"name": "adam", "lr": 1e-4},
    optim_end_model={"name": "adam", "lr": 5e-5},
)

#https://docs.argilla.io/en/v1.1.0/guides/techniques/weak_supervision.html



